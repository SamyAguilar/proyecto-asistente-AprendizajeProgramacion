import { GenerarPreguntasRequest, GenerarPreguntasResponse, PreguntaGenerada } from '../../domain/entities/QuestionGeneration';
import { IGeminiClient } from '../../domain/interfaces/IGeminiClient';
import { ICacheService } from '../../domain/interfaces/ICacheService';
import { AppDataSource } from '../../config/database';
import { Subtema } from '../../models/Subtema';
import { PreguntaQuiz } from '../../models/PreguntaQuiz';
import { OpcionRespuesta } from '../../models/OpcionRespuesta';

export class GenerateQuestionsUseCase {
  constructor(
    private geminiClient: IGeminiClient,
    private cacheService: ICacheService
  ) {}

  async execute(request: GenerarPreguntasRequest): Promise<GenerarPreguntasResponse> {
    console.log('üîç [UseCase] Iniciando generaci√≥n de preguntas...');

    try {
      // 1. Buscar en cach√© primero
      const cacheResult = await this.cacheService.buscarPreguntasEnCache(
        request.subtema_id,
        request.cantidad,
        request.dificultad
      );

      if (cacheResult.encontrado && cacheResult.data.length >= request.cantidad) {
        console.log(`‚úì [UseCase] ${cacheResult.data.length} preguntas encontradas en cach√©`);
        return {
          preguntas: cacheResult.data.slice(0, request.cantidad),
          subtema_id: request.subtema_id,
          cantidad_generada: request.cantidad
        };
      }

      // 2. Obtener contexto del subtema de BD
      const subtemaRepo = AppDataSource.getRepository(Subtema);
      const subtema = await subtemaRepo.findOne({
        where: { id: request.subtema_id },
        relations: ['tema']
      });

      if (!subtema) {
        throw new Error(`Subtema ${request.subtema_id} no encontrado`);
      }

      // 3. Construir prompt para Gemini (Prompt 1 del documento)
      const prompt = this.buildPrompt(subtema, request);

      console.log('ü§ñ [UseCase] Llamando a Gemini para generar preguntas...');
      const respuestaGemini = await this.geminiClient.generate(prompt, {
        temperature: 0.7,
        maxTokens: 2048,
        tipo: 'question_generation'
      });

      // 4. Parsear respuesta JSON
      const preguntasGeneradas = this.parseResponse(respuestaGemini);

      // 5. Validar formato
      this.validateQuestions(preguntasGeneradas);

      // 6. Guardar en base de datos
      await this.saveQuestionsToDatabase(preguntasGeneradas, request.subtema_id);

      // 7. Guardar en cach√©
      await this.cacheService.guardarPreguntasEnCache(request.subtema_id, preguntasGeneradas);

      console.log(`‚úì [UseCase] ${preguntasGeneradas.length} preguntas generadas y guardadas`);

      return {
        preguntas: preguntasGeneradas.slice(0, request.cantidad),
        subtema_id: request.subtema_id,
        cantidad_generada: preguntasGeneradas.length
      };

    } catch (error: any) {
      console.error('‚ùå [UseCase] Error al generar preguntas:', error.message);
      throw new Error(`Error al generar preguntas: ${error.message}`);
    }
  }

  private buildPrompt(subtema: Subtema, request: GenerarPreguntasRequest): string {
    return `
Eres un EXPERTO en educaci√≥n de programaci√≥n. Tu tarea es generar preguntas de quiz de alta calidad.

**CONTEXTO DEL SUBTEMA:**
- Tema: ${subtema.tema?.nombre || 'N/A'}
- Subtema: ${subtema.nombre}
- Descripci√≥n: ${subtema.descripcion}
- Contenido: ${subtema.contenidoDetalle || 'Ver descripci√≥n'}

**REQUISITOS:**
- Generar ${request.cantidad} preguntas de opci√≥n m√∫ltiple
- Dificultad: ${request.dificultad}
- 4 opciones por pregunta (solo 1 correcta)
- Distractores plausibles (opciones incorrectas que parezcan correctas)
- Explicaciones pedag√≥gicas

**FORMATO DE RESPUESTA (JSON):**
{
  "preguntas": [
    {
      "texto": "¬øPregunta clara y espec√≠fica?",
      "opciones": [
        {
          "texto": "Opci√≥n A",
          "es_correcta": true,
          "explicacion": "Por qu√© es correcta"
        },
        {
          "texto": "Opci√≥n B",
          "es_correcta": false,
          "explicacion": "Por qu√© es incorrecta"
        },
        {
          "texto": "Opci√≥n C",
          "es_correcta": false,
          "explicacion": "Por qu√© es incorrecta"
        },
        {
          "texto": "Opci√≥n D",
          "es_correcta": false,
          "explicacion": "Por qu√© es incorrecta"
        }
      ],
      "dificultad": "${request.dificultad}",
      "retroalimentacion_correcta": "¬°Excelente! Explicaci√≥n detallada...",
      "retroalimentacion_incorrecta": "No es correcto. La respuesta correcta es... porque...",
      "explicacion_detallada": "Explicaci√≥n profunda del concepto",
      "puntos": 10
    }
  ]
}

**CRITERIOS DE CALIDAD:**
1. Preguntas claras y sin ambig√ºedad
2. Cubrir diferentes aspectos del subtema
3. Distractores basados en errores comunes
4. Explicaciones que ense√±en, no solo corrijan
5. Progresi√≥n de dificultad si se solicitan m√∫ltiples preguntas

Responde SOLO con el JSON, sin texto adicional.
`;
  }

  private parseResponse(respuesta: string): PreguntaGenerada[] {
    try {
      // Buscar JSON en la respuesta
      const jsonMatch = respuesta.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('No se encontr√≥ JSON en la respuesta');
      }

      const parsed = JSON.parse(jsonMatch[0]);
      
      if (!parsed.preguntas || !Array.isArray(parsed.preguntas)) {
        throw new Error('Formato de respuesta inv√°lido: falta array de preguntas');
      }

      return parsed.preguntas;
    } catch (error: any) {
      console.error('Error al parsear respuesta:', error);
      throw new Error('Respuesta inv√°lida de Gemini');
    }
  }

  private validateQuestions(preguntas: PreguntaGenerada[]): void {
    for (const pregunta of preguntas) {
      if (!pregunta.texto || !pregunta.opciones || pregunta.opciones.length !== 4) {
        throw new Error('Pregunta inv√°lida: debe tener texto y exactamente 4 opciones');
      }

      const correctas = pregunta.opciones.filter(o => o.es_correcta);
      if (correctas.length !== 1) {
        throw new Error('Pregunta inv√°lida: debe tener exactamente 1 opci√≥n correcta');
      }
    }
  }

  private async saveQuestionsToDatabase(preguntas: PreguntaGenerada[], subtema_id: number): Promise<void> {
    try {
      const preguntaRepo = AppDataSource.getRepository(PreguntaQuiz);
      const opcionRepo = AppDataSource.getRepository(OpcionRespuesta);

      for (const pregunta of preguntas) {
        // Crear pregunta
        const nuevaPregunta = preguntaRepo.create({
          subtemaId: subtema_id,
          preguntaTexto: pregunta.texto,
          dificultad: pregunta.dificultad as any,
          tipoPregunta: 'opcion_multiple' as any,
          retroalimentacionCorrecta: pregunta.retroalimentacion_correcta,
          retroalimentacionIncorrecta: pregunta.retroalimentacion_incorrecta,
          generadoPorLlm: true
        });

        const preguntaGuardada = await preguntaRepo.save(nuevaPregunta);

        // Crear opciones
        for (let i = 0; i < pregunta.opciones.length; i++) {
          const opcion = pregunta.opciones[i];
          const nuevaOpcion = opcionRepo.create({
            preguntaId: preguntaGuardada.id,
            textoOpcion: opcion.texto,
            esCorrecta: opcion.es_correcta,
            explicacion: opcion.explicacion,
            orden: i + 1
          });

          await opcionRepo.save(nuevaOpcion);
        }
      }

      console.log(`üíæ [UseCase] ${preguntas.length} preguntas guardadas en BD`);
    } catch (error: any) {
      console.warn('‚ö†Ô∏è [UseCase] Error al guardar en BD (continuando):', error.message);
    }
  }
}
